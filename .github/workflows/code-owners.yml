name: CODEOWNERS

on:
  pull_request_target:
    types: [ opened, synchronize, reopened ]
  pull_request_review:
    types: [submitted, edited, dismissed]

jobs:
  check-codeowners-approval:
    name: Check Approvals
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      checks: write

    steps:
      - name: Exit early for non-approved reviews
        if: github.event_name == 'pull_request_review' && github.event.review.state != 'approved'
        run: |
          echo "Skipping check â€” review is not an approval."
          exit 0

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Verify CODEOWNERS approval
        env:
          AUTH_TOKEN: ${{ secrets.PAT_FOR_CODEOWNER_CHECK }}
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO="${{ github.repository }}"
          OWNER="${REPO%%/*}"
          
          # Verify CODEOWNERS exists in base branch (checked out above)
          echo "Parsing CODEOWNERS from base branch..."
          if [[ -f .github/CODEOWNERS ]]; then
            CODEOWNERS_FILE=".github/CODEOWNERS"
          elif [[ -f CODEOWNERS ]]; then
            CODEOWNERS_FILE="CODEOWNERS"
          else
            echo "No CODEOWNERS file found in base branch."
            exit 1
          fi
          
          echo "Getting changed files..."
          curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
            "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER/files?per_page=100" \
            | jq -r '.[].filename' > changed_files.txt

          echo "Getting approved reviewers..."
          curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
            "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER/reviews?per_page=100" \
            | jq -r '.[] | select(.state == "APPROVED") | .user.login' | sort -u > approved_users.txt
          
          MISSING_APPROVAL=0

          while read -r file; do
            matched_owner=""
            while read -r line; do
              [[ "$line" =~ ^#.*$ || -z "$line" ]] && continue
              pattern=$(echo "$line" | awk '{print $1}')
              owner=$(echo "$line" | awk '{$1=""; print $0}' | xargs)

              if [[ "$file" == $pattern || "$file" == */$pattern || "$pattern" == "*" ]]; then
                matched_owner="$owner"
              fi
            done < "$CODEOWNERS_FILE"

            if [[ -z "$matched_owner" ]]; then
              echo "File '$file' has no CODEOWNERS entry - skipping approval check."
              continue
            fi

            echo "File '$file' owned by: $matched_owner"
            approved=0

            for owner in $matched_owner; do
              if [[ "$owner" =~ ^@ ]]; then
                username="${owner#@}"

                if [[ "$username" =~ "/" ]]; then
                  team="${username#*/}"
                  org="${username%%/*}"
                  echo "Checking team '$team' members from org '$org'..."

                  response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                    "https://api.github.com/orgs/$org/teams/$team/members?per_page=100")

                  if echo "$response" | jq -e 'type == "array"' > /dev/null; then
                    members=$(echo "$response" | jq -r '.[].login')
                    for member in $members; do
                      if grep -qx "$member" approved_users.txt; then
                        approved=1
                        break 2
                      fi
                    done
                  else
                    echo "Could not resolve members of '$org/$team'."
                    echo "$response"
                    continue
                  fi
                else
                  if grep -qx "$username" approved_users.txt; then
                    approved=1
                    break
                  fi
                fi
              fi
            done

            if [[ "$approved" -eq 0 ]]; then
              echo "File '$file' has no CODEOWNER approval."
              MISSING_APPROVAL=1
            else
              echo "File '$file' is approved."
            fi

          done < changed_files.txt

          if [[ "$MISSING_APPROVAL" -eq 1 ]]; then
            echo "Missing required CODEOWNER approval(s)."
            exit 1
          else
            echo "All CODEOWNERS have approved."
          fi
