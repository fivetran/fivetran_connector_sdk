name: Python Code Quality Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install pylint requests

      - name: Get changed Python files from PR
        id: get_changed
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO="${{ github.repository }}"
          echo "Fetching changed files for PR #$PR_NUMBER in $REPO"
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${REPO}/pulls/${PR_NUMBER}/files" \
            | jq -r '.[] | select(.filename | endswith(".py")) | .filename' > changed_files.txt

          if [[ ! -s changed_files.txt ]]; then
            echo "No Python files changed."
            echo "SKIP=true" >> $GITHUB_ENV
          else
            echo "CHANGED=$(cat changed_files.txt | xargs)" >> $GITHUB_ENV
            echo "SKIP=false" >> $GITHUB_ENV
          fi

      - name: Run pylint on changed files
        if: env.SKIP != 'true'
        run: |
          pylint --output-format=json $CHANGED > pylint_output.json || true

      - name: Format pylint results as Markdown
        run: |
          if [[ "$SKIP" == "true" ]]; then
            echo 'BODY=### ðŸ§¹ Python Code Quality Check\n\nâœ… No Python files were changed in this PR.' >> $GITHUB_ENV
          else
            echo "BODY=### ðŸ§¹ Python Code Quality Check" >> $GITHUB_ENV
            echo >> $GITHUB_ENV
            echo '| File | Line | Type | Message |' >> $GITHUB_ENV
            echo '|------|------|------|---------|' >> $GITHUB_ENV
            jq -r '.[] | "| \(.path) | \(.line) | \(.type) | \(.message | gsub("[\n\r]"; " ")) |"' pylint_output.json >> $GITHUB_ENV
            echo >> $GITHUB_ENV
            echo '>> _This comment is auto-updated with every commit._' >> $GITHUB_ENV
          fi

      - name: Find existing comment
        uses: peter-evans/find-comment@v3
        id: find
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: github-actions[bot]
          body-includes: "### ðŸ§¹ Python Code Quality Check"

      - name: Create or update PR comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ env.BODY }}
          edit-mode: replace
