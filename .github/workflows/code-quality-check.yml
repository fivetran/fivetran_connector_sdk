name: Python Code Quality Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install base dependencies
        run: pip install pylint requests

      - name: Get changed Python files and install local requirements
        id: get_changed
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO="${{ github.repository }}"
          
          # Get changed .py files
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${REPO}/pulls/${PR_NUMBER}/files" \
            | jq -r '.[] | .filename' > all_files.txt

          grep '\.py$' all_files.txt > changed_files.txt || true

          if [[ ! -s changed_files.txt ]]; then
            echo "No Python files changed."
            echo "SKIP=true" >> $GITHUB_ENV
            exit 0
          else
            echo "SKIP=false" >> $GITHUB_ENV
            echo "CHANGED=$(cat changed_files.txt | xargs)" >> $GITHUB_ENV
  
            # Find unique requirements.txt in parent folders
            touch requirements_paths.txt
            while read -r file; do
              dir=$(dirname "$file")
              while [[ "$dir" != "." && "$dir" != "/" ]]; do
                req_path="$dir/requirements.txt"
                if [[ -f "$req_path" ]]; then
                  echo "$req_path" >> requirements_paths.txt
                  break
                fi
                dir=$(dirname "$dir")
              done
            done < changed_files.txt
  
            sort -u requirements_paths.txt > unique_reqs.txt
  
            # Install dependencies
            while read -r req; do
              echo "Installing dependencies from $req..."
              pip install -r "$req" || echo "Failed to install from $req"
            done < unique_reqs.txt
          fi

      - name: Run pylint on changed files
        if: env.SKIP != 'true'
        run: |
          pylint --output-format=json $CHANGED > pylint_output.json || true

      - name: Format pylint results as Markdown
        run: |
          {
            echo 'BODY<<EOF'
            echo '### ðŸ§¹ Python Code Quality Check'
            echo ''
            if [[ "$SKIP" == "true" ]]; then
              echo 'âœ… No Python files were changed in this PR.'
            else
              echo '| File | Line | Type | Message |'
              echo '|------|------|------|---------|'
              jq -r '.[] | "| \(.path) | \(.line) | \(.type) | \(.message | gsub("[\n\r]"; " ")) |"' pylint_output.json
              echo ''
              echo '_This comment is auto-updated with every commit._'
            fi
            echo 'EOF'
          } >> $GITHUB_ENV

      - name: Find existing comment
        uses: peter-evans/find-comment@v3
        id: find
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: github-actions[bot]
          body-includes: "### ðŸ§¹ Python Code Quality Check"

      - name: Create or update PR comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ env.BODY }}
          edit-mode: replace
