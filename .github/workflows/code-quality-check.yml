name: Python Code Quality Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install flake8 requests fivetran-connector-sdk

      - name: Detect changed Python files
        id: detect_changes
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO="${{ github.repository }}"

          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${REPO}/pulls/${PR_NUMBER}/files" \
            | jq -r '.[] | .filename' > all_files.txt

          grep '\.py$' all_files.txt > changed_files.txt || true

          if [[ ! -s changed_files.txt ]]; then
            echo "No Python files changed."
            echo "SKIP=true" >> $GITHUB_ENV
          else
            echo "SKIP=false" >> $GITHUB_ENV
            echo "CHANGED=$(cat changed_files.txt | xargs)" >> $GITHUB_ENV
          fi

      - name: Run Flake8 on changed files
        if: env.SKIP != 'true'
        run: |
          echo "Running flake8 on: $CHANGED"
          flake8 --format=json $CHANGED > flake8_output.json || true

      - name: Count issues
        if: env.SKIP != 'true'
        run: |
          python3 <<EOF
          import json
          with open("flake8_output.json") as f:
              data = json.load(f)
          count = sum(len(issues) for issues in data.values())
          print(f"Flake8 issues found: {count}")
          with open(os.environ['GITHUB_ENV'], 'a') as envf:
              envf.write(f"FLAKE8_ISSUE_COUNT={count}\n")
          EOF

      - name: Format summary (top 15 issues)
        if: env.SKIP != 'true'
        run: |
          python3 <<'EOF' > flake8_summary.md
          import json, os, itertools

          try:
              with open("flake8_output.json") as f:
                  data = json.load(f)
          except (FileNotFoundError, json.JSONDecodeError):
              data = {}

          messages = [
              {
                  "file": path,
                  "line": issue["line_number"],
                  "code": issue["code"],
                  "text": issue["text"]
              }
              for path, issues in data.items()
              for issue in issues
          ]

          print("### üßπ Python Code Quality Check\n")

          if not messages:
              print("‚úÖ No Flake8 issues found.")
          else:
              print("| File | Line | Code | Message |")
              print("|------|------|------|---------|")
              for msg in itertools.islice(messages, 15):
                  print(f"| {msg['file']} | {msg['line']} | {msg['code']} | {msg['text'].replace('|', ' ')} |")

              if len(messages) > 15:
                  run_url = f"https://github.com/{os.environ['GITHUB_REPOSITORY']}/actions/runs/{os.environ['GITHUB_RUN_ID']}"
                  print(f"\nOnly first 15 issues shown. Download full report from üìé [artifacts]({run_url}).")
              print("\n_This comment is auto-updated with every commit._")

          with open("python_code_quality_check_report.txt", "w") as txt:
              for msg in messages:
                  txt.write(f"{msg['file']}:{msg['line']} [{msg['code']}] {msg['text']}\n")
          EOF

      - name: Upload full report
        if: env.SKIP != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: python-code-quality-report
          path: python_code_quality_check_report.txt

      - name: Find existing comment
        uses: peter-evans/find-comment@v3
        id: find
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: github-actions[bot]
          body-includes: "### üßπ Python Code Quality Check"

      - name: Create or update PR comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body-path: flake8_summary.md
          edit-mode: replace

      - name: Fail if too many Flake8 issues
        if: env.SKIP != 'true'
        run: |
          echo "Total flake8 issues: $FLAKE8_ISSUE_COUNT"
          if [ "$FLAKE8_ISSUE_COUNT" -gt 10 ]; then
            echo "‚ùå Too many issues ($FLAKE8_ISSUE_COUNT). Please fix them before merging."
            exit 1
          fi
