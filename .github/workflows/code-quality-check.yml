name: Python Code Quality Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install flake8 requests fivetran-connector-sdk

      - name: Detect changed Python files
        id: detect_changes
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO="${{ github.repository }}"

          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${REPO}/pulls/${PR_NUMBER}/files" \
            | jq -r '.[] | .filename' > all_files.txt

          grep '\.py$' all_files.txt > changed_files.txt || true

          if [[ ! -s changed_files.txt ]]; then
            echo "No Python files changed."
            echo "SKIP=true" >> $GITHUB_ENV
          else
            echo "SKIP=false" >> $GITHUB_ENV
            echo "CHANGED=$(cat changed_files.txt | xargs)" >> $GITHUB_ENV
          fi

      - name: Run Flake8 on changed files
        if: env.SKIP != 'true'
        run: |
          echo "Running flake8 on: $CHANGED"
          flake8 $CHANGED > flake8_output.txt || true

      - name: Format summary (top 15 issues)
        if: env.SKIP != 'true'
        run: |
          python3 <<'EOF' > flake8_summary.md
          import json, os, itertools

          try:
              with open("flake8_output.txt") as f:
                  data = f.read().splitlines()
          except (FileNotFoundError, json.JSONDecodeError):
              data = {}

          print("### üßπ Python Code Quality Check\n")

          if not data:
              print("‚úÖ No Flake8 issues found.")
          else:
              with open(os.environ['GITHUB_ENV'], 'a') as envf:
                  envf.write(f"FLAKE8_ISSUE_PRESENT=True\n")
              for line in data:
                  print(line)
          
              print("\n_This comment is auto-updated with every commit._")

          with open("python_code_quality_check_report.txt", "w") as txt:
              for line in data:
                  txt.write(line)
          EOF

      - name: Upload full report
        if: env.SKIP != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: python-code-quality-report
          path: python_code_quality_check_report.txt

      - name: Find existing comment
        uses: peter-evans/find-comment@v3
        id: find
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: github-actions[bot]
          body-includes: "### üßπ Python Code Quality Check"

      - name: Create or update PR comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body-path: flake8_summary.md
          edit-mode: replace

      - name: Fail if too many Flake8 issues
        if: env.SKIP != 'true'
        run: |
          echo "Total flake8 issues: $FLAKE8_ISSUE_COUNT"
          if [ "$FLAKE8_ISSUE_COUNT" == 'True' ]; then
            echo "‚ùå Issues found in the code. Please fix them before merging."
            exit 1
          fi
